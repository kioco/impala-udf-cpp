#include "libsquid.h"

namespace nsLogFormat {

/*
 * very simple implementation of the conversion
 * from upper case to lower case
 */
std::string LogSquid::to_lowercase(std::string s) {
   std::string x;
   for(size_t i=0; i<s.length(); i++ ) {
       x += tolower(s[i]);
   }
   return x;
}

/*
 * NAME: parse
 * SUBJECT: Analyze and tokenize the log line generated by Squid.
 * PARAMS:
 *  IN: Field containing the log line generated by the Squid-cache proxy
 *      Note: The delimiter must be a white space
 *  OUT: Returns a vector with the parts of the log lines.
 * COMMENTS:
 * Uses a general-purpose algorithm very common and simple for this.
 * As for performance, we believe it will be sufficient for most cases.
 * We consider the compiler to be an excellent programmer,
 * so that it will be able to generate a very optimized code. :-)
 */
std::vector<std::string> LogSquid::parse(std::string slog)
{
  std::string sbuf;
  std::vector<std::string> vbuf;

  for(size_t i=0; i<= slog.length(); i++) {
   char c = slog[i];
    if( c == ' ' || c == 0) {
        std::cout << std::endl;
        vbuf.push_back(sbuf);
        sbuf.clear();
    } else if(c == '[' ){
        i++;
        sbuf.clear();
        while( slog[i] != ']' ) {
           std::cout << slog[i];
           sbuf += slog[i];
           i++;
        }
    } else if (c == '\"' ) {
        i++;
        sbuf.clear();
        while( slog[i] != '\"' ) {
           std::cout << slog[i];
           sbuf += slog[i];
           i++;
        }
    } else{
        std::cout << c;
        sbuf += slog[i];
    }
  }

  // Remove empty elements from the vector
  // Adapted from: https://www.techiedelight.com/remove-elements-vector-inside-loop-cpp/
  for(auto it = vbuf.begin(); it != vbuf.end(); it++) {
      if(*it == "") {
         vbuf.erase(it--);
      }
  }
  return vbuf;
}

}; // nsLogFormat
